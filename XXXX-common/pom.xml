<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <!-- 对应maven的model版本号 -->
    <modelVersion>4.0.0</modelVersion>
    <!-- src/main目录结构 -->
    <groupId>com.framework</groupId>
    <!-- 可以认为是Maven构建的项目名，比如你的项目中有子项目，就可以使用"项目名-子项目名"的命名方式 -->
    <artifactId>XXXX-common</artifactId>
    <!-- 版本号，SNAPSHOT意为快照，说明该项目还在开发中，是不稳定的版本。在Maven中很重要的一点是，groupId、artifactId、version三个元素生成了一个Maven项目的基本坐标，这非常重要，我在使用和研究Maven的时候多次感受到了这点。 -->
    <version>1.0.0</version>
    <!-- 项目打包的类型，可以使jar、war、rar、ear、pom，默认是jar -->
    <packaging>jar</packaging>
    <!-- 名称 -->
    <name>${project.artifactId}</name>
    <!-- 描述 -->
    <description>XXXX-common,公用类模块,静态类、枚举类、工具类等</description>
    <!-- 上级引用 -->
    <parent>
        <!-- 可以认为是Maven构建的项目名，比如你的项目中有子项目，就可以使用"项目名-子项目名"的命名方式 -->
        <artifactId>demo-framework-backstage</artifactId>
        <!-- src/main目录结构 -->
        <groupId>com.framework</groupId>
        <!-- 版本号，SNAPSHOT意为快照，说明该项目还在开发中，是不稳定的版本。在Maven中很重要的一点是，groupId、artifactId、version三个元素生成了一个Maven项目的基本坐标，这非常重要，我在使用和研究Maven的时候多次感受到了这点。 -->
        <version>1.0.0</version>
    </parent>
    <!-- 整体项目属性配置 -->
    <properties>
        <!-- mybatis-jar版本号 -->
        <my-batis.version>1.3.7</my-batis.version>
        <mybatis.spring.boot.version>1.3.2</mybatis.spring.boot.version>
        <mysql.version>5.1.47</mysql.version>
        <mybatis.spring.version>2.0.0</mybatis.spring.version>
        <spring.tx.version>5.1.4.RELEASE</spring.tx.version>
        <kaptcha.version>2.3.2</kaptcha.version>
        <thymeleaf.extras.version>3.0.4.RELEASE</thymeleaf.extras.version>
        <druid.version>1.1.13</druid.version>
        <druid.spring.boot.version>1.1.18</druid.spring.boot.version>

        <!-- 阿里巴巴fastjson版本号 -->
        <alibaba-fastjson.version>1.2.56</alibaba-fastjson.version>
        <!-- 加密jar版本号 -->
        <commons-codec.version>1.12</commons-codec.version>
        <!-- excel导出导入JAR -->
        <apache.poi.version>4.1.1</apache.poi.version>
    </properties>

    <!-- 统一管理jar包 -->
    <dependencies>


        <!-- 单元测试jar引用 start -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
        </dependency>
        <!-- 单元测试jar引用 end -->

        <!-- 工具类jar引入 start -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
        <!-- 工具类jar引入 end -->
        <!-- 阿里巴巴json工具jar引入 start -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>${alibaba-fastjson.version}</version>
        </dependency>
        <!-- 阿里巴巴json工具jar引入 end -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- http请求rest风格jar引入 start -->
        <!--<dependency>-->
        <!--<groupId>org.springframework.boot</groupId>-->
        <!--<artifactId>spring-boot-starter-data-rest</artifactId>-->
        <!--</dependency>-->
        <!-- http请求rest风格jar引入 end -->
        <!-- thymeleaf渲染jar引入 start -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.thymeleaf.extras</groupId>
            <artifactId>thymeleaf-extras-springsecurity5</artifactId>
            <version>${thymeleaf.extras.version}</version>
        </dependency>
        <!-- thymeleaf渲染jar引入 end -->
        <!-- aop事物jar引入 start -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <!-- aop事物jar引入 end -->
        <!-- 健康监控信息jar引用 start -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <!-- 健康监控信息jar引用 end -->
        <!-- -->
        <!-- 热部署jar引入 start -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <!--只在运行时起作用  打包时不打进去-->
            <scope>runtime</scope>
        </dependency>
        <!-- 热部署jar引入 end -->
        <!-- 静态页面jar引入 start -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-freemarker</artifactId>
        </dependency>
        <!-- 静态页面jar引入 end -->
        <!-- spring安全jar引入 start -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <!-- spring安全jar引入 end -->
        <!-- redis 引入jar start -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>${jedis.version}</version>
        </dependency>
        <!-- redis分片集群lettuce引入jar 开始 -->
        <!--<dependency>-->
        <!--<groupId>org.apache.commons</groupId>-->
        <!--<artifactId>commons-pool2</artifactId>-->
        <!--</dependency>-->
        <!-- redis分片集群lettuce引入jar 结束 -->

        <dependency>
            <groupId>org.springframework.session</groupId>
            <artifactId>spring-session-data-redis</artifactId>
        </dependency>
        <!-- redis 引入jar end -->

        <!-- 加密jar引入 start -->
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>${commons-codec.version}</version>
        </dependency>
        <!-- 加密jar引入 end -->

        <!-- active消息队列jar引入 start -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-activemq</artifactId>
        </dependency>
        <!-- active消息队列jar引入 end -->
        <!-- active消息队列连接池jar引入 start -->
        <!-- springboot 2.1.0以下版本需要的连接池JAR -->
        <!--<dependency>-->
        <!--<groupId>org.apache.activemq</groupId>-->
        <!--<artifactId>activemq-pool</artifactId>-->
        <!--</dependency>-->
        <!-- springboot 2.1.0以上版本需要的连接池JAR -->
        <dependency>
            <groupId>org.messaginghub</groupId>
            <artifactId>pooled-jms</artifactId>
        </dependency>
        <!-- active消息队列连接池jar引入 end -->

        <!-- MyBatis代码生成器jar引入 start -->
        <!--<dependency>-->
        <!--<groupId>org.mybatis.generator</groupId>-->
        <!--<artifactId>mybatis-generator-maven-plugin</artifactId>-->
        <!--<version>${my-batis.version}</version>-->
        <!--</dependency>-->
        <!--<dependency>-->
        <!--<groupId>org.mybatis</groupId>-->
        <!--<artifactId>mybatis</artifactId>-->
        <!--<version>3.4.6</version>-->
        <!--</dependency>-->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>${mybatis.spring.boot.version}</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis.generator</groupId>
            <artifactId>mybatis-generator-core</artifactId>
            <version>${my-batis.version}</version>
        </dependency>
        <!-- MyBatis代码生成器jar引入 end -->
        <!-- mysql数据库驱动jar引入 start -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.version}</version>
        </dependency>
        <!-- mysql数据库驱动jar引入 end -->
        <!-- JDBC数据库连接jar引入 start -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <!-- JDBC数据库连接jar引入 end -->
        <!-- spring扫描mybatis注解jar引入 start -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>${mybatis.spring.version}</version>
        </dependency>
        <!-- spring扫描mybatis注解jar引入 end -->

        <!--<dependency>-->
        <!--<groupId>com.alibaba</groupId>-->
        <!--<artifactId>druid-spring-boot-starter</artifactId>-->
        <!--<version>${druid.spring.boot.version}</version>-->
        <!--</dependency>-->

        <!--&lt;!&ndash; 注解切面jar引入 start &ndash;&gt;-->
        <!--<dependency>-->
        <!--<groupId>org.springframework</groupId>-->
        <!--<artifactId>spring-tx</artifactId>-->
        <!--<version>${spring.tx.version}</version>-->
        <!--</dependency>-->
        <!--&lt;!&ndash; 注解切面jar引入 end &ndash;&gt;-->


        <!-- cache引入 start -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>
        <!-- cache引入 end -->

        <!-- 验证码生成JAR引入 start -->
        <dependency>
            <groupId>com.github.penggle</groupId>
            <artifactId>kaptcha</artifactId>
            <version>${kaptcha.version}</version>
        </dependency>
        <!-- 验证码生成JAR引入 emd -->


        <!-- excel生成jar引入 开始 -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>${apache.poi.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>${apache.poi.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml-schemas</artifactId>
            <version>${apache.poi.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-scratchpad</artifactId>
            <version>${apache.poi.version}</version>
        </dependency>
        <!-- excel生成jar引入 结束 -->

    </dependencies>

    <build>
        <finalName>${project.name}</finalName>
        <plugins>
            <plugin>
                <!-- maven打包支持,configuration中的配置表示输出两个jar，其中以exe结尾的jar用于执行，另一个可以被依赖 start -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <classifier>exe</classifier>
                </configuration>
                <!-- maven打包支持,configuration中的配置表示输出两个jar，其中以exe结尾的jar用于执行，另一个可以被依赖 end -->
            </plugin>
        </plugins>
        <!-- 编译打包处理对应目录下配置文件路径配置 start -->
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <!-- 添加文件引用组 -->
                <includes>
                    <include>**/*.xml</include>
                </includes>
                <!-- 排除引用文件组 -->
                <excludes>
                    <!--<exclude>**/*.properties</exclude>-->
                </excludes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <!-- 添加文件引用组 -->
                <includes>
                    <include>**/*.*</include>
                </includes>
                <!-- 排除引用文件组 -->
                <excludes>
                    <!--<exclude>**/*.properties</exclude>-->
                </excludes>
            </resource>
        </resources>
        <!-- 编译打包处理对应目录下配置文件路径配置 end -->
    </build>
</project>
